from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                            QLineEdit, QPushButton, QTableWidget,
                            QTableWidgetItem, QHeaderView, QFileDialog,
                            QMessageBox, QMenu, QAction, QDialog, QFormLayout,
                            QApplication, QProgressBar)
from PyQt5.QtCore import Qt, pyqtSignal
from PyQt5.QtGui import QFont, QCursor

import os
import json
import requests
from datetime import datetime
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtWidgets import QProgressDialog

class AddEditFingerprintDialog(QDialog):
    """添加或编辑指纹对话框"""
    def __init__(self, parent=None, fingerprint=None):
        super().__init__(parent)
        self.fingerprint = fingerprint
        
        # 获取父窗口的DPI缩放比例
        if parent and hasattr(parent, 'dpi_scale'):
            self.dpi_scale = parent.dpi_scale
        else:
            # 默认DPI缩放比例
            self.dpi_scale = 1.0
            
        self.init_ui()

    def init_ui(self):
        """初始化UI"""
        self.setWindowTitle("添加指纹" if not self.fingerprint else "编辑指纹")
        # 根据DPI缩放调整对话框大小
        self.setMinimumWidth(int(400 * self.dpi_scale))

        layout = QFormLayout(self)
        # 根据DPI缩放调整表单布局的间距
        layout.setVerticalSpacing(int(10 * self.dpi_scale))
        layout.setHorizontalSpacing(int(15 * self.dpi_scale))
        layout.setContentsMargins(
            int(20 * self.dpi_scale),
            int(20 * self.dpi_scale),
            int(20 * self.dpi_scale),
            int(20 * self.dpi_scale)
        )

        # 根据DPI缩放调整字体大小
        font_size = int(10 * self.dpi_scale)
        label_font = QFont("PingFang SC", font_size)
        
        # 创建输入框
        self.name_edit = QLineEdit()
        self.name_edit.setFont(label_font)
        self.name_edit.setMinimumHeight(int(30 * self.dpi_scale))
        
        self.version_edit = QLineEdit()
        self.version_edit.setFont(label_font)
        self.version_edit.setMinimumHeight(int(30 * self.dpi_scale))
        
        self.url_edit = QLineEdit()
        self.url_edit.setFont(label_font)
        self.url_edit.setMinimumHeight(int(30 * self.dpi_scale))
        
        self.description_edit = QLineEdit()
        self.description_edit.setFont(label_font)
        self.description_edit.setMinimumHeight(int(30 * self.dpi_scale))

        # 如果是编辑模式，填充现有数据
        if self.fingerprint:
            self.name_edit.setText(self.fingerprint.get('name', ''))
            self.version_edit.setText(self.fingerprint.get('version', ''))
            self.url_edit.setText(self.fingerprint.get('url', ''))
            self.description_edit.setText(self.fingerprint.get('description', ''))

        # 创建标签并设置字体
        name_label = QLabel("名称:")
        name_label.setFont(label_font)
        version_label = QLabel("版本:")
        version_label.setFont(label_font)
        url_label = QLabel("指纹:")
        url_label.setFont(label_font)
        desc_label = QLabel("描述:")
        desc_label.setFont(label_font)
        
        # 添加到表单
        layout.addRow(name_label, self.name_edit)
        layout.addRow(version_label, self.version_edit)
        layout.addRow(url_label, self.url_edit)
        layout.addRow(desc_label, self.description_edit)

        # 按钮
        button_layout = QHBoxLayout()
        # 根据DPI缩放调整按钮间距
        button_layout.setSpacing(int(10 * self.dpi_scale))
        
        # 计算按钮大小
        button_width = int(100 * self.dpi_scale)
        button_height = int(30 * self.dpi_scale)
        
        self.save_button = QPushButton("保存")
        self.save_button.setFont(label_font)
        self.save_button.setMinimumSize(button_width, button_height)
        self.save_button.clicked.connect(self.accept)
        
        self.cancel_button = QPushButton("取消")
        self.cancel_button.setFont(label_font)
        self.cancel_button.setMinimumSize(button_width, button_height)
        self.cancel_button.clicked.connect(self.reject)

        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)

        # 添加一些垂直间距
        spacer = QWidget()
        spacer.setMinimumHeight(int(10 * self.dpi_scale))
        layout.addRow(spacer)
        
        layout.addRow("", button_layout)

    def get_fingerprint_data(self):
        """获取指纹数据"""
        return {
            'name': self.name_edit.text(),
            'version': self.version_edit.text(),
            'url': self.url_edit.text(),
            'description': self.description_edit.text(),
            'saved_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

class VulnerabilityFingerprintPage(QWidget):
    """漏洞指纹标签页"""

    # 定义信号
    status_changed = pyqtSignal(str)

    def __init__(self, config):
        super().__init__()
        self.config = config
        
        # 获取DPI缩放比例
        self.dpi_scale = self.get_dpi_scale()

        # 指纹存储路径
        self.fingerprint_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "fingerprints")
        if not os.path.exists(self.fingerprint_dir):
            os.makedirs(self.fingerprint_dir)

        # 指纹文件路径
        self.fingerprint_file = os.path.join(self.fingerprint_dir, "fingerprints.json")

        # 指纹列表
        self.fingerprints = []

        # 初始化UI
        self.init_ui()

        # 加载已保存的指纹
        self.load_fingerprints()
        
    def get_dpi_scale(self):
        """获取DPI缩放比例"""
        import platform
        from PyQt5.QtWidgets import QApplication
        
        if platform.system() == 'Windows':
            try:
                # 获取主屏幕
                screen = QApplication.primaryScreen()
                dpi = screen.logicalDotsPerInch()
                
                # 标准DPI是96
                scale = dpi / 96.0
                
                # 限制缩放范围，避免过大或过小
                scale = max(0.8, min(scale, 2.0))
                
                return scale
            except Exception as e:
                print(f"获取DPI缩放失败: {e}")
                return 1.0
        else:
            # 非Windows系统返回默认值
            return 1.0

    def init_ui(self):
        """初始化UI"""
        from . import styles
        # 使用动态生成的样式，传入DPI缩放比例
        self.setStyleSheet(styles.get_style(self.dpi_scale))
        
        # 创建主布局
        main_layout = QVBoxLayout(self)
        # 根据DPI缩放调整边距
        margin = int(10 * self.dpi_scale)
        main_layout.setContentsMargins(margin, margin, margin, margin)

        # 创建表格
        self.fingerprint_table = QTableWidget()
        # 根据DPI缩放调整字体大小
        font_size = int(9 * self.dpi_scale)
        self.fingerprint_table.setFont(QFont("PingFang SC", font_size))
        self.fingerprint_table.setEditTriggers(QTableWidget.NoEditTriggers)  # 设置为不可编辑
        self.fingerprint_table.setSelectionBehavior(QTableWidget.SelectRows)  # 设置为选择整行
        self.fingerprint_table.setContextMenuPolicy(Qt.CustomContextMenu)  # 设置为自定义右键菜单
        self.fingerprint_table.customContextMenuRequested.connect(self.show_context_menu)

        # 设置表格列
        self.fingerprint_table.setColumnCount(5)
        self.fingerprint_table.setHorizontalHeaderLabels(["名称", "版本", "指纹", "描述", "保存时间"])

        # 调整列宽
        self.fingerprint_table.horizontalHeader().setSectionResizeMode(0, QHeaderView.Interactive)
        self.fingerprint_table.horizontalHeader().setSectionResizeMode(1, QHeaderView.Interactive)
        self.fingerprint_table.horizontalHeader().setSectionResizeMode(2, QHeaderView.Interactive)
        self.fingerprint_table.horizontalHeader().setSectionResizeMode(3, QHeaderView.Interactive)
        self.fingerprint_table.horizontalHeader().setSectionResizeMode(4, QHeaderView.Stretch)
        
        # 设置各列宽度，使用DPI缩放
        self.fingerprint_table.setColumnWidth(0, int(150 * self.dpi_scale))  # 名称
        self.fingerprint_table.setColumnWidth(1, int(80 * self.dpi_scale))   # 版本
        self.fingerprint_table.setColumnWidth(2, int(200 * self.dpi_scale))  # 指纹
        self.fingerprint_table.setColumnWidth(3, int(250 * self.dpi_scale))  # 描述

        # 设置表格行高，使用DPI缩放
        row_height = int(30 * self.dpi_scale)
        self.fingerprint_table.verticalHeader().setDefaultSectionSize(row_height)
        
        # 设置内容居中显示
        for col in range(self.fingerprint_table.columnCount()):
            self.fingerprint_table.horizontalHeader().setDefaultAlignment(Qt.AlignCenter)
            for row in range(self.fingerprint_table.rowCount()):
                item = self.fingerprint_table.item(row, col)
                if item:
                    item.setTextAlignment(Qt.AlignCenter)

        main_layout.addWidget(self.fingerprint_table)

        # 创建底部按钮区域
        button_layout = QHBoxLayout()
        # 根据DPI缩放调整按钮间距
        button_layout.setSpacing(int(10 * self.dpi_scale))

        # 计算按钮大小
        button_width = int(100 * self.dpi_scale)
        button_height = int(30 * self.dpi_scale)
        # 根据DPI缩放调整字体大小
        font_size = int(10 * self.dpi_scale)

        # 添加按钮
        self.add_button = QPushButton("添加")
        self.add_button.setFont(QFont("PingFang SC", font_size))
        self.add_button.setMinimumSize(button_width, button_height)
        self.add_button.clicked.connect(self.add_fingerprint)

        # 编辑按钮
        self.edit_button = QPushButton("编辑")
        self.edit_button.setFont(QFont("PingFang SC", font_size))
        self.edit_button.setMinimumSize(button_width, button_height)
        self.edit_button.clicked.connect(self.edit_fingerprint)

        # 删除按钮
        self.delete_button = QPushButton("删除")
        self.delete_button.setFont(QFont("PingFang SC", font_size))
        self.delete_button.setMinimumSize(button_width, button_height)
        self.delete_button.clicked.connect(self.delete_selected_fingerprint)

        # 远程更新按钮
        self.update_button = QPushButton("远程更新")
        self.update_button.setFont(QFont("PingFang SC", font_size))
        self.update_button.setMinimumSize(button_width, button_height)
        self.update_button.clicked.connect(self.update_fingerprints_from_remote)

        button_layout.addWidget(self.add_button)
        button_layout.addWidget(self.edit_button)
        button_layout.addWidget(self.delete_button)
        button_layout.addWidget(self.update_button)
        button_layout.addStretch(1)

        main_layout.addLayout(button_layout)

    def load_fingerprints(self):
        """加载所有已保存的指纹"""
        try:
            if os.path.exists(self.fingerprint_file):
                with open(self.fingerprint_file, 'r', encoding='utf-8') as f:
                    self.fingerprints = json.load(f)
            else:
                self.fingerprints = []

            # 显示所有指纹
            self.display_fingerprints(self.fingerprints)

            # 更新状态
            self.status_changed.emit(f"已加载 {len(self.fingerprints)} 条指纹")

        except Exception as e:
            QMessageBox.critical(self, "错误", f"加载指纹失败: {str(e)}")
            self.status_changed.emit("加载指纹失败")
            self.fingerprints = []

    def save_fingerprints(self):
        """保存所有指纹"""
        try:
            with open(self.fingerprint_file, 'w', encoding='utf-8') as f:
                json.dump(self.fingerprints, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            QMessageBox.critical(self, "错误", f"保存指纹失败: {str(e)}")
            self.status_changed.emit("保存指纹失败")
            return False

    def display_fingerprints(self, fingerprints):
        """显示指纹列表"""
        # 清空表格
        self.fingerprint_table.setRowCount(0)

        # 添加数据
        for row, fingerprint in enumerate(fingerprints):
            self.fingerprint_table.insertRow(row)
            # 创建表格项并设置居中
            name_item = QTableWidgetItem(fingerprint.get('name', ''))
            name_item.setTextAlignment(Qt.AlignCenter)
            self.fingerprint_table.setItem(row, 0, name_item)
            
            version_item = QTableWidgetItem(fingerprint.get('version', ''))
            version_item.setTextAlignment(Qt.AlignCenter)
            self.fingerprint_table.setItem(row, 1, version_item)
            
            url_item = QTableWidgetItem(fingerprint.get('url', ''))
            url_item.setTextAlignment(Qt.AlignCenter)
            self.fingerprint_table.setItem(row, 2, url_item)
            
            desc_item = QTableWidgetItem(fingerprint.get('description', ''))
            desc_item.setTextAlignment(Qt.AlignCenter)
            self.fingerprint_table.setItem(row, 3, desc_item)
            
            time_item = QTableWidgetItem(fingerprint.get('saved_time', ''))
            time_item.setTextAlignment(Qt.AlignCenter)
            self.fingerprint_table.setItem(row, 4, time_item)

    def show_context_menu(self, pos):
        """显示右键菜单"""
        # 获取选中的行
        selected_items = self.fingerprint_table.selectedItems()
        if not selected_items:
            return

        # 创建菜单
        menu = QMenu(self)
        edit_action = QAction("编辑", self)
        delete_action = QAction("删除", self)
        copy_action = QAction("复制指纹", self)

        menu.addAction(edit_action)
        menu.addAction(delete_action)
        menu.addAction(copy_action)

        action = menu.exec_(self.fingerprint_table.viewport().mapToGlobal(pos))

        if action == edit_action:
            self.edit_fingerprint()
        elif action == delete_action:
            self.delete_selected_fingerprint()
        elif action == copy_action:
            self.copy_fingerprint()

    def add_fingerprint(self):
        """添加指纹"""
        dialog = AddEditFingerprintDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            # 获取指纹数据
            fingerprint = dialog.get_fingerprint_data()

            # 添加到指纹列表
            self.fingerprints.append(fingerprint)

            # 保存指纹
            if self.save_fingerprints():
                # 重新加载指纹
                self.load_fingerprints()
                self.status_changed.emit("已添加指纹")

    def edit_fingerprint(self):
        """编辑指纹"""
        # 获取选中的行
        selected_rows = set(item.row() for item in self.fingerprint_table.selectedItems())
        if not selected_rows or len(selected_rows) > 1:
            QMessageBox.warning(self, "警告", "请选择一条指纹进行编辑")
            return

        row = list(selected_rows)[0]
        fingerprint = self.fingerprints[row]

        # 打开编辑对话框
        dialog = AddEditFingerprintDialog(self, fingerprint)
        if dialog.exec_() == QDialog.Accepted:
            # 获取更新后的指纹数据
            updated_fingerprint = dialog.get_fingerprint_data()

            # 更新指纹
            self.fingerprints[row] = updated_fingerprint

            # 保存指纹
            if self.save_fingerprints():
                # 重新加载指纹
                self.load_fingerprints()
                self.status_changed.emit("已更新指纹")

    def delete_selected_fingerprint(self):
        """删除选中的指纹"""
        # 获取选中的行
        selected_rows = set(item.row() for item in self.fingerprint_table.selectedItems())
        if not selected_rows:
            QMessageBox.warning(self, "警告", "请先选择要删除的指纹")
            return

        # 确认删除
        reply = QMessageBox.question(self, "确认删除", f"确定要删除选中的 {len(selected_rows)} 条指纹吗？",
                                    QMessageBox.Yes | QMessageBox.No, QMessageBox.No)
        if reply != QMessageBox.Yes:
            return

        # 删除指纹
        # 注意：需要从大到小删除，以避免索引变化
        for row in sorted(selected_rows, reverse=True):
            del self.fingerprints[row]

        # 保存指纹
        if self.save_fingerprints():
            # 重新加载指纹
            self.load_fingerprints()
            self.status_changed.emit(f"已删除 {len(selected_rows)} 条指纹")

    class UpdateWorker(QThread):
        progress = pyqtSignal(int, str)  # (percentage, message)
        """异步更新指纹的工作线程"""
        finished = pyqtSignal(bool, str, list)
        error = pyqtSignal(str)

        def __init__(self, config, fingerprints):
            super().__init__()
            self.config = config
            self.fingerprints = fingerprints
            self._is_running = True

        def run(self):
            """执行更新任务"""
            try:
                # 获取配置
                url = self.config.get('fingerprint_update_url')
                
                if not url:
                    self.error.emit("请在配置页面设置指纹更新URL!")
                    return

                # 检查URL可达性
                self.progress.emit(10, "正在检查URL可达性...")
                try:
                    head_response = requests.head(url, timeout=10)
                    if head_response.status_code == 404:
                        self.error.emit("远程URL不存在(404错误)")
                        return
                    if head_response.status_code >= 400:
                        self.error.emit(f"远程URL访问失败(HTTP {head_response.status_code})")
                        return
                except requests.exceptions.RequestException as e:
                    self.error.emit(f"无法连接到远程URL: {str(e)}")
                    return

                # 获取远程指纹数据
                self.progress.emit(30, "正在获取远程指纹数据...")
                try:
                    response = requests.get(url, timeout=10)
                    response.raise_for_status()
                    
                    # 检查内容类型
                    content_type = response.headers.get('Content-Type', '')
                    if 'application/json' not in content_type:
                        self.error.emit("远程返回的不是JSON数据")
                        return
                        
                    remote_fingerprints = response.json()
                except requests.exceptions.RequestException as e:
                    self.error.emit(f"获取远程数据失败: {str(e)}")
                    return
                except ValueError as e:
                    self.error.emit("远程返回的数据不是有效的JSON格式")
                    return

                if not isinstance(remote_fingerprints, list):
                    self.error.emit("远程指纹数据格式不正确，应为列表!")
                    return

                # 检查指纹数据格式
                self.progress.emit(60, "正在验证指纹数据...")
                required_fields = {'name', 'version', 'url', 'description'}
                for fp in remote_fingerprints:
                    if not all(field in fp for field in required_fields):
                        self.error.emit("远程指纹数据缺少必要字段!")
                        return

                # 去重合并 - 基于指纹URL
                self.progress.emit(80, "正在合并指纹数据...")
                local_urls = {fp['url'] for fp in self.fingerprints}
                new_fingerprints = [
                    fp for fp in remote_fingerprints 
                    if fp['url'] not in local_urls
                ]

                if not new_fingerprints:
                    self.finished.emit(False, "没有新的指纹可更新!", [])
                    return

                # 添加保存时间
                for fp in new_fingerprints:
                    fp['saved_time'] = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

                self.finished.emit(True, f"获取到 {len(new_fingerprints)} 条新指纹", new_fingerprints)

            except Exception as e:
                self.error.emit(f"处理过程中发生错误: {str(e)}")

    def update_fingerprints_from_remote(self):
        # 确保没有正在进行的更新
        if hasattr(self, 'update_worker') and self.update_worker.isRunning():
            QMessageBox.warning(self, "警告", "已有更新正在进行中")
            return
        """异步从远程URL获取指纹并合并到现有指纹中"""
        # 禁用按钮防止重复点击
        self.update_button.setEnabled(False)
        
        # 创建自定义对话框
        self.progress_dialog = QDialog(self)
        self.progress_dialog.setWindowTitle("更新指纹")
        self.progress_dialog.setWindowModality(Qt.WindowModal)
        # 根据DPI缩放调整对话框大小
        self.progress_dialog.setFixedSize(int(300 * self.dpi_scale), int(150 * self.dpi_scale))
        
        # 设置主布局
        main_layout = QVBoxLayout()
        # 根据DPI缩放调整边距和间距
        margin = int(20 * self.dpi_scale)
        spacing = int(20 * self.dpi_scale)
        main_layout.setContentsMargins(margin, margin, margin, margin)
        main_layout.setSpacing(spacing)
        
        # 添加进度条
        self.progress_bar = QProgressBar()
        self.progress_bar.setRange(0, 100)
        self.progress_bar.setValue(0)
        self.progress_bar.setStyleSheet("""
            QProgressBar {
                height: 20px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #5B9BD5;
            }
        """)
        main_layout.addWidget(self.progress_bar)
        
        # 添加提示标签
        self.progress_label = QLabel("正在从远程获取指纹...")
        self.progress_label.setAlignment(Qt.AlignCenter)
        self.progress_label.setStyleSheet("font-size: 14px;")
        main_layout.addWidget(self.progress_label)
        
        # 创建按钮布局
        btn_layout = QHBoxLayout()
        btn_layout.setContentsMargins(0, 0, 0, 0)
        btn_layout.setSpacing(0)
        
        # 添加弹性空间使按钮居中
        btn_layout.addStretch()
        
        # 添加取消按钮
        cancel_btn = QPushButton("取消")
        cancel_btn.setFixedSize(80, 30)  # 固定按钮大小
        cancel_btn.setStyleSheet("""
            QPushButton {
                font-size: 12px;
                padding: 5px;
                min-width: 80px;
            }
        """)
        cancel_btn.clicked.connect(self.cancel_update)
        btn_layout.addWidget(cancel_btn)
        
        # 添加弹性空间使按钮居中
        btn_layout.addStretch()
        
        # 将按钮布局添加到主布局
        main_layout.addLayout(btn_layout)
        
        # 设置对话框布局
        self.progress_dialog.setLayout(main_layout)
        
        # 立即显示对话框
        self.progress_dialog.show()
        QApplication.processEvents()  # 强制立即处理UI事件
        
        # 创建工作线程
        self.update_worker = self.UpdateWorker(self.config, self.fingerprints)
        self.update_worker.finished.connect(self.on_update_finished)
        self.update_worker.error.connect(self.on_update_error)
        self.update_worker.progress.connect(self.on_update_progress)
        self.update_worker.start()

    def on_update_progress(self, percent, message):
        """处理进度更新信号
        Args:
            percent (int): 进度百分比(0-100)
            message (str): 进度消息
        """
        if hasattr(self, 'progress_bar') and self.progress_bar:
            self.progress_bar.setValue(percent)
        if hasattr(self, 'progress_label') and self.progress_label:
            self.progress_label.setText(message)
        QApplication.processEvents()

    def cancel_update(self):
        """取消更新操作"""
        if hasattr(self, 'update_worker') and self.update_worker.isRunning():
            self.update_worker.terminate()
            self.update_worker.wait()
        
        if hasattr(self, 'progress_dialog'):
            self.progress_dialog.close()
            self.progress_dialog = None
            
        self.update_button.setEnabled(True)
        self.status_changed.emit("更新已取消")

    def on_update_finished(self, success, message, new_fingerprints):
        """更新完成处理"""
        self.progress_dialog.close()
        self.update_button.setEnabled(True)
        
        if not success:
            QMessageBox.information(self, "提示", message)
            return

        # 合并指纹
        merged_fingerprints = self.fingerprints + new_fingerprints
        
        # 保存指纹
        self.fingerprints = merged_fingerprints
        if not self.save_fingerprints():
            return

        # 刷新显示
        self.display_fingerprints(merged_fingerprints)
        
        QMessageBox.information(
            self, 
            "成功", 
            f"已成功更新 {len(new_fingerprints)} 条新指纹!"
        )
        self.status_changed.emit(f"已更新 {len(new_fingerprints)} 条指纹")

    def on_update_error(self, error_msg):
        """更新出错处理"""
        self.progress_dialog.close()
        self.update_button.setEnabled(True)
        
        if "RequestException" in error_msg:
            QMessageBox.critical(self, "错误", f"获取远程指纹失败: {error_msg}")
            self.status_changed.emit("更新指纹失败(网络错误)")
        elif "JSONDecodeError" in error_msg:
            QMessageBox.critical(self, "错误", "远程返回的数据不是有效的JSON格式")
            self.status_changed.emit("更新指纹失败(数据格式错误)")
        else:
            QMessageBox.critical(self, "错误", f"处理指纹数据时出错: {error_msg}")
            self.status_changed.emit("更新指纹失败")
            
    def copy_fingerprint(self):
        """复制选中的指纹到剪贴板"""
        # 获取选中的行
        selected_rows = set(item.row() for item in self.fingerprint_table.selectedItems())
        if not selected_rows:
            QMessageBox.warning(self, "警告", "请先选择要复制的指纹")
            return
            
        # 如果选择了多行，只取第一行
        row = list(selected_rows)[0]
        
        # 获取指纹列（第3列，索引为2）的内容
        fingerprint_item = self.fingerprint_table.item(row, 2)
        if fingerprint_item:
            fingerprint = fingerprint_item.text()
            
            # 复制到剪贴板
            clipboard = QApplication.clipboard()
            clipboard.setText(fingerprint)
            
            # 提示用户
            self.status_changed.emit(f"已复制指纹: {fingerprint}")
